#clinical information containing survival information and histology. This is optional
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
laml
View(laml)
View(laml@data)
View(laml@variants.per.sample)
View(laml@variant.type.summary)
View(laml@variant.classification.summary)
View(laml@gene.summary)
View(laml@summary)
View(laml@maf.silent)
View(laml@clinical.data)
library(ggplot2)
library(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools')
# can be gz compressed
# required
#clinical information containing survival information and histology. This is optional
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
# optional copy number data, can be GISTIC output/custom table containing sample names, gene names & copy-number status (Amp/Del)
gistic_res_folder <- system.file("extdata", package = "maftools")
laml.gistic = readGistic(gisticDir = gistic_res_folder, isTCGA = TRUE)
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
laml
View(laml)
View(laml@data)
View(laml@variants.per.sample)
View(laml@variant.type.summary)
View(laml@variant.classification.summary)
View(laml@gene.summary)
View(laml@summary)
View(laml@maf.silent)
View(laml@clinical.data)
#Shows sample summry.
getSampleSummary(laml)
#Shows gene summary.
getGeneSummary(laml)
#shows clinical data associated with samples
getClinicalData(laml)
#Shows all fields in MAF
getFields(laml)
#Writes maf summary to an output file with basename laml.
write.mafSummary(maf = laml, basename = 'laml')
# Plotting MAF summary
plotmafSummary(maf = laml, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
# Alt. of preliminary plotting
# generates a barplot of mutated genes color coded for variant classification
mafbarplot(maf = laml, n = 20, genes = NULL)
#oncoplot for top ten mutated genes
oncoplot(maf = laml, top = 10)
laml.titv = titv(maf = laml, plot = FALSE, useSyn = TRUE)
plotTiTv(res = laml.titv)
brca <- system.file("extdata", "brca.maf.gz", package = "maftools")
brca = read.maf(maf = brca, verbose = FALSE)
rainfallPlot(maf = brca, detectChangePoints = TRUE, pointSize = 0.4)
laml.mutload = tcgaCompare(maf = laml, cohortName = 'Example-LAML', logscale = TRUE, capture_size = 50)
plotVaf(maf = laml, vafCol = 'i_TumorVAF_WU')
laml.gistic
gisticChromPlot(gistic = laml.gistic, markBands = "all")
# Co-gisticChromPlot
# two GISTIC objects can be plotted side-by-side for cohort comparison
# for demo, the same cohort is used
coGisticChromPlot(gistic1 = laml.gistic, gistic2 = laml.gistic, g1Name = "AML-1", g2Name = "AML-2", type = 'Amp')
# can change the type to change the type of event show: amplication, deletions, etc
gisticBubblePlot(gistic = laml.gistic)
gisticOncoPlot(gistic = laml.gistic, clinicalData = getClinicalData(x = laml), clinicalFeatures = 'FAB_classification', sortByAnnotation = TRUE, top = 10)
tcga.ab.009.seg <- system.file("extdata", "TCGA.AB.3009.hg19.seg.txt", package = "maftools")
plotCBSsegments(cbsFile = tcga.ab.009.seg)
#exclusive/co-occurance event analysis on top 10 mutated genes.
somaticInteractions(maf = laml, top = 25, pvalue = c(0.05, 0.1))
# subsetting MAF
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'), mafObj = FALSE)[1:5]
##Same as above but return output as an MAF object (Default behaviour)
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'))
# Specifying queries and controlling output fields
#Select all Splice_Site mutations from DNMT3A and NPM1
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'")
#Same as above but include only 'i_transcript_name' column in the output
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'", fields = 'i_transcript_name')
# subsetting by clinical data
#Select all samples with FAB clasification M4 in clinical data
laml_m4 = subsetMaf(maf = laml, clinQuery = "FAB_classification %in% 'M4'")
# subsetting MAF
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'), mafObj = FALSE)[1:5]
##Same as above but return output as an MAF object (Default behaviour)
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'))
# Specifying queries and controlling output fields
#Select all Splice_Site mutations from DNMT3A and NPM1
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'")
#Same as above but include only 'i_transcript_name' column in the output
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'", fields = 'i_transcript_name')
# subsetting by clinical data
#Select all samples with FAB clasification M4 in clinical data
laml_m4 = subsetMaf(maf = laml, clinQuery = "FAB_classification %in% 'M4'")
library(ggplot2)
library(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools')
# can be gz compressed
# required
#clinical information containing survival information and histology. This is optional
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
# optional copy number data, can be GISTIC output/custom table containing sample names, gene names & copy-number status (Amp/Del)
gistic_res_folder <- system.file("extdata", package = "maftools")
laml.gistic = readGistic(gisticDir = gistic_res_folder, isTCGA = TRUE)
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
laml
View(laml)
View(laml@data)
View(laml@variants.per.sample)
View(laml@variant.type.summary)
View(laml@variant.classification.summary)
View(laml@gene.summary)
View(laml@summary)
View(laml@maf.silent)
View(laml@clinical.data)
#Shows sample summry.
getSampleSummary(laml)
#Shows gene summary.
getGeneSummary(laml)
#shows clinical data associated with samples
getClinicalData(laml)
#Shows all fields in MAF
getFields(laml)
#Writes maf summary to an output file with basename laml.
write.mafSummary(maf = laml, basename = 'laml')
# Plotting MAF summary
plotmafSummary(maf = laml, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
# Alt. of preliminary plotting
# generates a barplot of mutated genes color coded for variant classification
mafbarplot(maf = laml, n = 20, genes = NULL)
#oncoplot for top ten mutated genes
oncoplot(maf = laml, top = 10)
laml.titv = titv(maf = laml, plot = FALSE, useSyn = TRUE)
plotTiTv(res = laml.titv)
brca <- system.file("extdata", "brca.maf.gz", package = "maftools")
brca = read.maf(maf = brca, verbose = FALSE)
rainfallPlot(maf = brca, detectChangePoints = TRUE, pointSize = 0.4)
laml.mutload = tcgaCompare(maf = laml, cohortName = 'Example-LAML', logscale = TRUE, capture_size = 50)
plotVaf(maf = laml, vafCol = 'i_TumorVAF_WU')
laml.gistic
gisticChromPlot(gistic = laml.gistic, markBands = "all")
# Co-gisticChromPlot
# two GISTIC objects can be plotted side-by-side for cohort comparison
# for demo, the same cohort is used
coGisticChromPlot(gistic1 = laml.gistic, gistic2 = laml.gistic, g1Name = "AML-1", g2Name = "AML-2", type = 'Amp')
# can change the type to change the type of event show: amplication, deletions, etc
gisticBubblePlot(gistic = laml.gistic)
gisticOncoPlot(gistic = laml.gistic, clinicalData = getClinicalData(x = laml), clinicalFeatures = 'FAB_classification', sortByAnnotation = TRUE, top = 10)
tcga.ab.009.seg <- system.file("extdata", "TCGA.AB.3009.hg19.seg.txt", package = "maftools")
plotCBSsegments(cbsFile = tcga.ab.009.seg)
#exclusive/co-occurance event analysis on top 10 mutated genes.
somaticInteractions(maf = laml, top = 25, pvalue = c(0.05, 0.1))
# subsetting MAF
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'), mafObj = FALSE)[1:5]
##Same as above but return output as an MAF object (Default behaviour)
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'))
# Specifying queries and controlling output fields
#Select all Splice_Site mutations from DNMT3A and NPM1
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'")
#Same as above but include only 'i_transcript_name' column in the output
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'", fields = 'i_transcript_name')
# subsetting by clinical data
#Select all samples with FAB clasification M4 in clinical data
laml_m4 = subsetMaf(maf = laml, clinQuery = "FAB_classification %in% 'M4'")
# subsetting MAF
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'), mafObj = FALSE)[1:5]
##Same as above but return output as an MAF object (Default behaviour)
subsetMaf(maf = laml, tsb = c('TCGA-AB-3009', 'TCGA-AB-2933'))
# Specifying queries and controlling output fields
#Select all Splice_Site mutations from DNMT3A and NPM1
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'")
#Same as above but include only 'i_transcript_name' column in the output
subsetMaf(maf = laml, genes = c('DNMT3A', 'NPM1'), mafObj = FALSE,
query = "Variant_Classification == 'Splice_Site'", fields = 'i_transcript_name')
# subsetting by clinical data
#Select all samples with FAB clasification M4 in clinical data
#laml_m4 = subsetMaf(maf = laml, clinQuery = "FAB_classification %in% 'M4'")
remotes::install_github(repo = 'VanLoo-lab/ascat/ASCAT')
library(maftools)
library(ASCAT)
#Matched normal BAM files are strongly recommended
counts = maftools::gtMarkers(t_bam = "tumor.bam",
n_bam = "normal.bam",
build = "hg19")
library(remotes)  # if not installed:install.packages('remotes')
remotes::install_github("RubD/Giotto")
library(Giotto)
setwd('/Users/onkiwong/Documents/GitHub/BIOF3001_Group_project/seqFISH_data')
org_st_count = read.csv('Out_gene_expressions_10000genes.csv',header = T, row.names = 1)
sc_exp = read.table('raw_somatosensory_sc_exp.txt',header = T,row.names = 1)
sc_anno = read.table('somatosensory_sc_labels.txt',header = F)
st_location = read.csv('Out_rect_locations.csv',header = T, row.names = 1)
cell_type = sc_anno[,1]
my_python_path= "/Users/onkiwong/miniforge3/bin/python"
instrs = createGiottoInstructions(python_path = my_python_path)
sc_obj = createGiottoObject(raw_exprs = sc_count, instructions = instrs)
sc_count = read.table('raw_somatosensory_sc_exp.txt',header = T,row.names = 1)
sc_anno = read.table('somatosensory_sc_labels.txt',header = F)
st_location = read.csv('Out_rect_locations.csv',header = T, row.names = 1)
cell_type = sc_anno[,1]
sc_obj = createGiottoObject(raw_exprs = sc_count, instructions = instrs)
sc_obj = filterGiotto(gobject = sc_obj, expression_threshold = 0.1, gene_det_in_min_cells = 10,
min_det_genes_per_cell = 10, expression_values = c('raw'), verbose = T)
sc_obj = normalizeGiotto(gobject = sc_obj, scalefactor = 6000, verbose = T)
sc_obj <- addStatistics(gobject = sc_obj)
anno = data.table::data.table(cell_ID = sc_obj@cell_ID, cell_type = cell_type)
colnames(anno) = c('cell_ID','cell_type')
sc_obj@cell_metadata = data.table::merge.data.table(sc_obj@cell_metadata, anno, by ='cell_ID')
gini_markers = findMarkers_one_vs_all(gobject = sc_obj,
method = 'gini',
expression_values = 'normalized',
cluster_column = 'cell_type',
min_genes = 20,
min_expr_gini_score = 0.5,
min_det_gini_score = 0.5)
sign_markers = unique(gini_markers
comb_rank <= 1000)])
View(gini_markers)
sign_markers = unique(gini_markers$genes[which(gini_markers$comb_rank <= 1000)])
View(sign_markers)
sign_markers = unique(gini_markers$genes[gini_markers$comb_rank <= 1000])
View(sign_markers)
topgenes_gini = gini_markers[, head(.SD, 2), by = 'cluster']
average_cell_type_expr = Giotto:::create_average_DT(gobject = sc_obj,
meta_data_name = 'cell_type',
expression_values = 'normalized')
average_cell_type_expr = average_cell_type_expr[sign_markers,]
colnames(average_cell_type_expr) = gsub('cluster_', '', colnames(average_cell_type_expr) )
locs = data.table::data.table(cell_ID = rownames(st_location), st_location)
data.table::setnames(locs, new = c('sdimx', 'sdimy', 'cell_ID'))
View(locs)
View(locs[,c(1, 4, 5)])
## analysis ST
data.table::setnames(locs[,c(1, 4, 5)], new = c('cell_ID','sdimx', 'sdimy'))
st_obj = createGiottoObject(raw_exprs = st_count,
spatial_locs = locs,
instructions = instrs)
st_count = read.csv('Out_gene_expressions_10000genes.csv',header = T, row.names = 1)
st_obj = createGiottoObject(raw_exprs = st_count,
spatial_locs = locs,
instructions = instrs)
st_count
View(st_count)
st_obj = createGiottoObject(raw_exprs = st_count,
spatial_locs = locs,
instructions = instrs)
st_obj = createGiottoObject(raw_exprs = t(st_count),
spatial_locs = locs,
instructions = instrs)
st_obj = filterGiotto(gobject = st_obj, expression_threshold = 1, gene_det_in_min_cells = 5,
min_det_genes_per_cell = 5, expression_values = c('raw'), verbose = T)
st_obj = normalizeGiotto(gobject = st_obj, scalefactor = 6000, verbose = T)
st_obj <- addStatistics(gobject = st_obj)
st_obj <- calculateHVG(gobject = st_obj, method = 'cov_loess',
difference_in_cov = 0.1,show_plot = FALSE, save_param = list(save_name = '3_a_HVGplot', base_height = 5, base_width = 5))
gene_metadata = fDataDT(st_obj)
featgenes = gene_metadata[hvg == 'yes']$gene_ID
st_obj <- runPCA(gobject = st_obj, genes_to_use = featgenes, scale_unit = F, center = F)
st_obj <- runUMAP(st_obj, dimensions_to_use = 1:5, n_threads = 20)
install.packages("irlba")
install.packages("Matrix")
install.packages("Matrix")
install.packages("irlba")
library(Matrix)
library(irlba)
st_obj <- runUMAP(st_obj, dimensions_to_use = 1:5, n_threads = 20)
library(Matrix)
st_obj <- runUMAP(st_obj, dimensions_to_use = 1:5, n_threads = 20)
install.packages("irlba")
install.packages("irlba")
library(Giotto)
library(Matrix)
library(irlba)
st_obj <- runUMAP(st_obj, dimensions_to_use = 1:5, n_threads = 20)
st_obj
View(st_obj)
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
install.packages("Matrix", type = "source")
install.packages("irlba", type = "source")
install.packages("Matrix", type = "source")
library(Giotto)
library(Matrix)
library(irlba)
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
install.packages("Matrix", type = "source")
install.packages("irlba", type = "source")
install.packages("irlba", type = "source")
install.packages("Matrix", type = "source")
install.packages("Matrix", type = "source")
install.packages("Matrix", type = "source")
library(Matrix)
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
install.packages("Matrix", type = "source")
install.packages("Matrix", type = "source")
BiocManager::install("Spectra")
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
library(Spectra)
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
library(Giotto)
library(remotes)
if not installed:install.packages('remotes')
install.packages('remotes')
remotes::install_github("RubD/Giotto")
library(Giotto)
setwd('/Users/onkiwong/Documents/GitHub/BIOF3001_Group_project/seqFISH_data')
st_count = read.csv('Out_gene_expressions_10000genes.csv',header = T, row.names = 1)
sc_count = read.table('raw_somatosensory_sc_exp.txt',header = T,row.names = 1)
sc_anno = read.table('somatosensory_sc_labels.txt',header = F)
st_location = read.csv('Out_rect_locations.csv',header = T, row.names = 1)
cell_type = sc_anno[,1]
my_python_path= "/Users/onkiwong/miniforge3/bin/python"
instrs = createGiottoInstructions(python_path = my_python_path)
## analysis scRNA-seq
sc_obj = createGiottoObject(raw_exprs = sc_count, instructions = instrs)
sc_obj = filterGiotto(gobject = sc_obj, expression_threshold = 0.1, gene_det_in_min_cells = 10,
min_det_genes_per_cell = 10, expression_values = c('raw'), verbose = T)
sc_obj = normalizeGiotto(gobject = sc_obj, scalefactor = 6000, verbose = T)
sc_obj <- addStatistics(gobject = sc_obj)
# add cell type annotation
anno = data.table::data.table(cell_ID = sc_obj@cell_ID, cell_type = cell_type)
colnames(anno) = c('cell_ID','cell_type')
sc_obj@cell_metadata = data.table::merge.data.table(sc_obj@cell_metadata, anno, by ='cell_ID')
gini_markers = findMarkers_one_vs_all(gobject = sc_obj,
method = 'gini',
expression_values = 'normalized',
cluster_column = 'cell_type',
min_genes = 20,
min_expr_gini_score = 0.5,
min_det_gini_score = 0.5)
sign_markers = unique(gini_markers$genes[gini_markers$comb_rank <= 1000])
topgenes_gini = gini_markers[, head(.SD, 2), by = 'cluster']
average_cell_type_expr = Giotto:::create_average_DT(gobject = sc_obj,
meta_data_name = 'cell_type',
expression_values = 'normalized')
average_cell_type_expr = average_cell_type_expr[sign_markers,]
colnames(average_cell_type_expr) = gsub('cluster_', '', colnames(average_cell_type_expr) )
locs = data.table::data.table(cell_ID = rownames(st_location), st_location)
## analysis ST
data.table::setnames(locs[,c(1, 4, 5)], new = c('cell_ID','sdimx', 'sdimy'))
st_obj = createGiottoObject(raw_exprs = t(st_count),
spatial_locs = locs,
instructions = instrs)
st_obj = filterGiotto(gobject = st_obj, expression_threshold = 1, gene_det_in_min_cells = 5,
min_det_genes_per_cell = 5, expression_values = c('raw'), verbose = T)
st_obj = normalizeGiotto(gobject = st_obj, scalefactor = 6000, verbose = T)
st_obj <- addStatistics(gobject = st_obj)
st_obj <- calculateHVG(gobject = st_obj, method = 'cov_loess',
difference_in_cov = 0.1,show_plot = FALSE, save_param = list(save_name = '3_a_HVGplot', base_height = 5, base_width = 5))
gene_metadata = fDataDT(st_obj)
featgenes = gene_metadata[hvg == 'yes']$gene_ID
st_obj <- runPCA(gobject = st_obj, genes_to_use = featgenes, scale_unit = F, center = F)
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
st_obj <- createNearestNetwork(gobject = st_obj, dimensions_to_use = 1:5, k = 10)
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
library(reticulate)
py_install("igraph")
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
reticulate::py_last_error()
reticulate::py_last_error()$r_trace$full_call
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
use_python(my_python_path)
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
use_python("/Users/onkiwong/miniforge3/bin/python")
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
py_config()$python
py_install("igraph", "/Users/onkiwong/miniforge3/bin/python")
install.packages("igraph")
install.packages("igraph")
library(Matrix)
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
library(igraph)
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
reticulate::py_last_error()
py_install("igraph", "/Users/onkiwong/miniforge3/bin/python")
library(reticulate)
py_install("igraph", python = "/Users/onkiwong/miniforge3/bin/python")
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
library(Giotto)
library(Matrix)
library(igraph)
setwd('/Users/onkiwong/Documents/GitHub/BIOF3001_Group_project/seqFISH_data')
st_count = read.csv('Out_gene_expressions_10000genes.csv',header = T, row.names = 1)
sc_count = read.table('raw_somatosensory_sc_exp.txt',header = T,row.names = 1)
sc_anno = read.table('somatosensory_sc_labels.txt',header = F)
st_location = read.csv('Out_rect_locations.csv',header = T, row.names = 1)
cell_type = sc_anno[,1]
my_python_path= "/Users/onkiwong/miniforge3/bin/python"
instrs = createGiottoInstructions(python_path = my_python_path)
## analysis scRNA-seq
sc_obj = createGiottoObject(raw_exprs = sc_count, instructions = instrs)
sc_obj = filterGiotto(gobject = sc_obj, expression_threshold = 0.1, gene_det_in_min_cells = 10,
min_det_genes_per_cell = 10, expression_values = c('raw'), verbose = T)
sc_obj = normalizeGiotto(gobject = sc_obj, scalefactor = 6000, verbose = T)
sc_obj <- addStatistics(gobject = sc_obj)
# add cell type annotation
anno = data.table::data.table(cell_ID = sc_obj@cell_ID, cell_type = cell_type)
colnames(anno) = c('cell_ID','cell_type')
sc_obj@cell_metadata = data.table::merge.data.table(sc_obj@cell_metadata, anno, by ='cell_ID')
gini_markers = findMarkers_one_vs_all(gobject = sc_obj,
method = 'gini',
expression_values = 'normalized',
cluster_column = 'cell_type',
min_genes = 20,
min_expr_gini_score = 0.5,
min_det_gini_score = 0.5)
sign_markers = unique(gini_markers$genes[gini_markers$comb_rank <= 1000])
topgenes_gini = gini_markers[, head(.SD, 2), by = 'cluster']
average_cell_type_expr = Giotto:::create_average_DT(gobject = sc_obj,
meta_data_name = 'cell_type',
expression_values = 'normalized')
average_cell_type_expr = average_cell_type_expr[sign_markers,]
colnames(average_cell_type_expr) = gsub('cluster_', '', colnames(average_cell_type_expr) )
locs = data.table::data.table(cell_ID = rownames(st_location), st_location)
## analysis ST
data.table::setnames(locs[,c(1, 4, 5)], new = c('cell_ID','sdimx', 'sdimy'))
st_obj = createGiottoObject(raw_exprs = t(st_count),
spatial_locs = locs,
instructions = instrs)
st_obj = filterGiotto(gobject = st_obj, expression_threshold = 1, gene_det_in_min_cells = 5,
min_det_genes_per_cell = 5, expression_values = c('raw'), verbose = T)
st_obj = normalizeGiotto(gobject = st_obj, scalefactor = 6000, verbose = T)
st_obj <- addStatistics(gobject = st_obj)
st_obj <- calculateHVG(gobject = st_obj, method = 'cov_loess',
difference_in_cov = 0.1,show_plot = FALSE, save_param = list(save_name = '3_a_HVGplot', base_height = 5, base_width = 5))
gene_metadata = fDataDT(st_obj)
featgenes = gene_metadata[hvg == 'yes']$gene_ID
st_obj <- runPCA(gobject = st_obj, genes_to_use = featgenes, scale_unit = F, center = F)
st_obj <- runUMAP(gobject = st_obj, dimensions_to_use = 1:5, n_threads = 20)
st_obj <- createNearestNetwork(gobject = st_obj, dimensions_to_use = 1:5, k = 10)
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
reticulate::py_last_error()
Sys.setenv(RETICULATE_PYTHON = "/Users/onkiwong/Library/Python/3.11/bin/python")
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
my_python_path= "/Users/onkiwong/miniforge3/bin/python"
py_install("igraph", python = "/Users/onkiwong/miniforge3/bin/python")
library(reticulate)
py_install("igraph", python = "/Users/onkiwong/miniforge3/bin/python")
library(reticulate)
use_python("/Users/onkiwong/Library/Python/3.11/bin/python")
library(reticulate)
use_python()
library(reticulate)
use_python("/Users/onkiwong/Library/Python/3.11/bin/python")
use_python('/Users/onkiwong/miniforge3/bin/python')
## Leiden clustering
Sys.setenv(RETICULATE_PYTHON = "/Users/onkiwong/miniforge3/bin/python")
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
py_config()
py_install('igraph', '/Users/onkiwong/miniforge3/lib/python3.12/site-packages/')
py_install('igraph', '/Users/onkiwong/miniforge3/lib/python3.12/site-packages')
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
instrs = createGiottoInstructions(python_path = '/Users/onkiwong/miniforge3/envs/spatialdwls')
use_python('/Users/onkiwong/miniforge3/envs/spatialdwls')
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
library(reticulate)
igraph <- import("igraph")
library(reticulate)
py_install('igraph')
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
library(reticulate)
igraph <- import("igraph", convert = FALSE)
install.packages("igraph")
install.packages("igraph")
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
py_config()
> library(reticulate)
library(reticulate)
py_install('igraph')
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
library(reticulate)
py_config()
py_run_string("import igraph")
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
py_run_string("import igraph")
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
library(reticulate)
py_config()
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
## Leiden clustering
st_obj <- doLeidenCluster(gobject = st_obj, resolution = 1, n_iterations = 1000)
st_obj <- newrunDWLSDeconv(gobject = st_obj,
cluster_column = "leiden_clus",
sign_matrix = average_cell_type_expr)
st_obj <- runDWLSDeconv(gobject = st_obj,
cluster_column = "leiden_clus",
sign_matrix = average_cell_type_expr)
install.packages('quadprog')
st_obj <- runDWLSDeconv(gobject = st_obj,
cluster_column = "leiden_clus",
sign_matrix = average_cell_type_expr)
write.csv(st_obj@spatial_enrichment$DWLS,'SpatialDWLS_seqFISH_10000.csv')
